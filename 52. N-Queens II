class Solution {
public:
    bool check(int row,int col,vector<string>&board){
        int n=board.size();
        for(int c=0;c<col;c++){
            if(board[row][c]=='Q'){
                return false;
            }
        }
        int i=row,j=col;
        while(i>=0 && j>=0){
            if(board[i][j]=='Q'){
                return false;
            }
            i--;
            j--;
        }
        i=row,j=col;
        while(i<n && j>=0){
            if(board[i][j]=='Q'){
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    void fnc(int n,vector<string>&board,vector<vector<string>>&ans,int col){
        if(col==n){
            ans.push_back(board);
            return;
        }
        for(int row=0;row<n;row++){
            if(check(row,col,board)){
                board[row][col]='Q';
                fnc(n,board,ans,col+1);
                board[row][col]='.';
            }
        }
    }
    int totalNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n,string(n,'.'));
        fnc(n,board,ans,0);
        return ans.size();
    }
};
