class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        fnc(n, board, 0, ans);
        return ans;
    }

private:
    void fnc(int n, vector<string>& board, int col, vector<vector<string>>& ans) {
        if (col == n) {
            ans.push_back(board);
            return;
        }
        for (int row = 0; row < n; row++) {
            if (check(row, col, board)) {
                board[row][col] = 'Q'; // Place the queen
                fnc(n, board, col + 1, ans);
                board[row][col] = '.'; // Remove the queen
            }
        }
    }

    bool check(int row, int col, vector<string>& board) {
        int n = board.size();
        // Left check
        for (int c = 0; c < col; c++) {
            if (board[row][c] == 'Q') {
                return false;
            }
        }

        // Upper diagonal check
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Lower diagonal check
        for (int i = row, j = col; i < n && j >= 0; i++, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        return true;
    }
};
